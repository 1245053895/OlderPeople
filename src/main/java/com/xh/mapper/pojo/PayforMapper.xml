<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xh.mapper.pojo.PayforMapper">
  <resultMap id="BaseResultMap" type="com.xh.po.Pay">
    <id column="PayId" jdbcType="INTEGER" property="payid" />
    <result column="PayName" jdbcType="VARCHAR" property="payname" />
    <result column="PayPicture" jdbcType="VARCHAR" property="paypicture" />
    <result column="Pay_A" jdbcType="VARCHAR" property="payA" />
    <result column="Pay_B" jdbcType="VARCHAR" property="payB" />
    <result column="Pay_C" jdbcType="VARCHAR" property="payC" />
  </resultMap>

  <sql id="Base_Column_List">
    PayId, PayName, PayPicture, Pay_A, Pay_B, Pay_C
  </sql>
   <!--查询ById-->
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from pay
    where PayId = #{payid,jdbcType=INTEGER}
  </select>
  <!--删除ById-->
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from pay
    where PayId = #{payid,jdbcType=INTEGER}
  </delete>
  <!--插入ById-->
  <insert id="insert" parameterType="com.xh.po.Pay">
    insert into pay (PayId, PayName, PayPicture,
    Pay_A, Pay_B, Pay_C)
    values (#{payid,jdbcType=INTEGER}, #{payname,jdbcType=VARCHAR}, #{paypicture,jdbcType=VARCHAR},
    #{payA,jdbcType=VARCHAR}, #{payB,jdbcType=VARCHAR}, #{payC,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xh.po.Pay">
    insert into pay
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="payid != null">
        PayId,
      </if>
      <if test="payname != null">
        PayName,
      </if>
      <if test="paypicture != null">
        PayPicture,
      </if>
      <if test="payA != null">
        Pay_A,
      </if>
      <if test="payB != null">
        Pay_B,
      </if>
      <if test="payC != null">
        Pay_C,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="payid != null">
        #{payid,jdbcType=INTEGER},
      </if>
      <if test="payname != null">
        #{payname,jdbcType=VARCHAR},
      </if>
      <if test="paypicture != null">
        #{paypicture,jdbcType=VARCHAR},
      </if>
      <if test="payA != null">
        #{payA,jdbcType=VARCHAR},
      </if>
      <if test="payB != null">
        #{payB,jdbcType=VARCHAR},
      </if>
      <if test="payC != null">
        #{payC,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>

  <!--更新ById-->
  <update id="updateByPrimaryKeySelective" parameterType="com.xh.po.Pay">
    update pay
    <set>
      <if test="payname != null">
        PayName = #{payname,jdbcType=VARCHAR},
      </if>
      <if test="paypicture != null">
        PayPicture = #{paypicture,jdbcType=VARCHAR},
      </if>
      <if test="payA != null">
        Pay_A = #{payA,jdbcType=VARCHAR},
      </if>
      <if test="payB != null">
        Pay_B = #{payB,jdbcType=VARCHAR},
      </if>
      <if test="payC != null">
        Pay_C = #{payC,jdbcType=VARCHAR},
      </if>
    </set>
    where PayId = #{payid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xh.po.Pay">
    update pay
    set PayName = #{payname,jdbcType=VARCHAR},
    PayPicture = #{paypicture,jdbcType=VARCHAR},
    Pay_A = #{payA,jdbcType=VARCHAR},
    Pay_B = #{payB,jdbcType=VARCHAR},
    Pay_C = #{payC,jdbcType=VARCHAR}
    where PayId = #{payid,jdbcType=INTEGER}
  </update>


  <!--查询所有-->
  <select id="QuerryAllPay" parameterType="list" resultType="com.xh.po.Pay">
    SELECT PayId,PayName,PayPicture,Pay_A AS PayA ,Pay_B AS PayB FROM pay
  </select>

  <!--实现模糊查询-->
  <select id="QuerryConfuse" parameterType="com.xh.po.vo.StringAndString" resultType="com.xh.po.Pay">
    SELECT *
    FROM pay WHERE PayId LIKE '%${sqlString}%' OR PayName LIKE '%${sqlString}%'
  </select>

</mapper>